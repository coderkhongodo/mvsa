import os
import zipfile
import shutil

# Optional: ch·ªâ d√πng gdown n·∫øu thi·∫øu file zip
try:
    import gdown
except ImportError:
    gdown = None

ROOT = os.path.dirname(os.path.abspath(__file__))
ZIP_PATH = os.path.join(ROOT, "MVSA-single.zip")
DATA_DIR = os.path.join(ROOT, "data")
DEST_DIR = os.path.join(DATA_DIR, "MVSA-Single")
TMP_DIR = os.path.join(DATA_DIR, "_mvsa_tmp")

FILE_ID = "1zdoXpFXLzqsP_E-WO6JgNJxviInYMdDe"  # n·∫øu c·∫ßn t·∫£i

os.makedirs(DATA_DIR, exist_ok=True)

# 1) C√≥ s·∫µn zip th√¨ d√πng lu√¥n, kh√¥ng th√¨ t·∫£i v·ªÅ
if not os.path.exists(ZIP_PATH):
    if gdown is None:
        raise RuntimeError("MVSA-single.zip kh√¥ng t·ªìn t·∫°i v√† gdown ch∆∞a ƒë∆∞·ª£c c√†i. H√£y c√†i: pip install gdown")
    print("‚¨áÔ∏è Downloading MVSA-single.zip...")
    gdown.download(id=FILE_ID, output=ZIP_PATH, quiet=False)

# 2) Gi·∫£i n√©n v√†o th∆∞ m·ª•c t·∫°m
if os.path.exists(TMP_DIR):
    shutil.rmtree(TMP_DIR)
os.makedirs(TMP_DIR, exist_ok=True)

print("üì¶ Extracting...")
with zipfile.ZipFile(ZIP_PATH, 'r') as zip_ref:
    zip_ref.extractall(TMP_DIR)

# 3) Chu·∫©n ho√° th√†nh data/MVSA-Single
# C√°c t√¨nh hu·ªëng th∆∞·ªùng g·∫∑p sau khi gi·∫£i n√©n:
# - TMP_DIR/MVSA_Single/data/...
# - TMP_DIR/MVSA-Single/data/...
# - TMP_DIR/data/...
candidates = [d for d in os.listdir(TMP_DIR) if os.path.isdir(os.path.join(TMP_DIR, d))]
src_dir = None

# ∆Øu ti√™n th∆∞ m·ª•c b·∫Øt ƒë·∫ßu b·∫±ng 'MVSA'
for name in candidates:
    lower = name.lower()
    if lower.startswith("mvsa"):
        src_dir = os.path.join(TMP_DIR, name)
        break

# N·∫øu kh√¥ng c√≥, ki·ªÉm tra th∆∞ m·ª•c 'data' tr·ª±c ti·∫øp b√™n trong TMP_DIR
if src_dir is None and os.path.isdir(os.path.join(TMP_DIR, "data")):
    # T·∫°o ƒë√≠ch d·∫°ng data/MVSA-Single v√† di chuy·ªÉn 'data' v√†o trong
    if os.path.exists(DEST_DIR):
        shutil.rmtree(DEST_DIR)
    os.makedirs(DEST_DIR, exist_ok=True)
    shutil.move(os.path.join(TMP_DIR, "data"), os.path.join(DEST_DIR, "data"))
else:
    # C√≥ src_dir (MVSA_Single ho·∫∑c MVSA-Single)
    if src_dir is None:
        # fallback: di chuy·ªÉn to√†n b·ªô TMP_DIR v√†o DEST_DIR
        if os.path.exists(DEST_DIR):
            shutil.rmtree(DEST_DIR)
        shutil.move(TMP_DIR, DEST_DIR)
    else:
        if os.path.exists(DEST_DIR):
            shutil.rmtree(DEST_DIR)
        shutil.move(src_dir, DEST_DIR)

# 4) D·ªçn d·∫πp TMP_DIR n·∫øu v·∫´n c√≤n
if os.path.exists(TMP_DIR):
    shutil.rmtree(TMP_DIR)

print(f"‚úÖ Done. Dataset is at: {DEST_DIR}")
print(f"Images should be at: {os.path.join(DEST_DIR, 'data')}/<id>.jpg")